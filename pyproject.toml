[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "pycisTopic"
authors = [
  { name = "Carmen Bravo", email = "carmen.bravogonzalezblas@kuleuven.be" },
  { name = "Gert Hulselmans", email = "gert.hulselmans@kuleuven.be" },
  { name = "Seppe De Winter", email = "seppe.dewinter@kuleuven.be" }
]
description = "pycisTopic is a Python module to simultaneously identify cell states and cis-regulatory topics from single cell epigenomics data."
readme = "README.rst"
version = "2.0a"
requires-python = "~=3.11"
keywords = ["scATAC", "cell state", "topic modeling", "LDA", "enhancer"]
license = { file = "LICENSE.txt" }
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Science/Research",
  "License :: Other/Proprietary License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Scientific/Engineering :: Bio-Informatics",
]
dependencies = [
  "numpy >= 1.20.3, < 2",
  "pandas == 1.5",
  "polars >= 1",
  "pyarrow >= 8.0.0",
  "pyranges < 0.0.128",
  "numba",
  "ray",
  "scatac_fragment_tools >= 0.1.2",
  "scikit-learn",
  "lda",
  "matplotlib < 3.7",
  "tmtoolkit",
  "gensim",
  "macs2",
  "pybiomart",
  "pyscenic",
  "scrublet",
  "harmonypy",
  "igraph",
  "leidenalg",
  "seaborn",
  "adjustText",
  "statsmodels",
  "scanpy",
  "scanorama",
  "bbknn",
  "loomxpy",
  "bs4",
  "lxml"
]

[project.optional-dependencies]
docs = [
	"sphinx_rtd_theme",
	"nbsphinx",
	"nbsphinx_link",
	"numpydoc",
	"sphinx_autosummary_accessors",
	"autodocsumm",
	"sphinx_copybutton",
	"sphinx_design",
	"sphinx_favicon",
	"pandoc"
]
development = [
  "mypy",
  "ruff"
]

[project.urls]
Homepage = "https://github.com/aertslab/pycisTopic"
Documentation = "https://pycistopic.readthedocs.io/"
Repository = "https://github.com/aertslab/pycisTopic"
Changelog = "https://github.com/aertslab/pycisTopic/releases"

[project.scripts]
pycistopic = "pycisTopic.cli.pycistopic:main"

[tool.ruff]
target-version = "py38"
line-length = 88
fix = true

lint.select = [
  "E", # pycodestyle
  "W", # pycodestyle
  "F", # Pyflakes
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "D", # flake8-docstrings
  "I", # isort
  "SIM", # flake8-simplify
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports
  "Q", # flake8-quotes
  "UP", # pyupgrade
  "PT", # flake8-pytest-style
  "RUF", # Ruff-specific rules
]

lint.ignore = [
  # Line length regulated by black
  "E501",
  # pydocstyle: http://www.pydocstyle.org/en/stable/error_codes.html
  # numpy convention with a few additional lints
  "D107",
  "D203",
  "D212",
  "D401",
  "D402",
  "D415",
  "D416",
  # flake8-pytest-style:
  "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
  # flake8-simplify
  "SIM102", # Use a single `if` statement instead of nested `if` statements
  # ruff
  "RUF005", # unpack-instead-of-concatenating-to-collection-literal
  # pycodestyle
  # TODO: Remove errors below to further improve docstring linting
  # Ordered from most common to least common errors.
  "D105",
  "D100",
  "D103",
  "D102",
  "D104",
  "D101",
]

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR/stubs"
plugins = ["numpy.typing.mypy_plugin"]
